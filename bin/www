#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pmachi5:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * ADDED!! Require Socket.IO
 */
var io = require('socket.io')(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * ADDED!! Socket.IO Connection.
 */
let userNum=0;
let userEX = [];
let userName=[];
let userIDEX = [];

//アバター
let AX = [];
let AY=[];
let C = [];

let room;
let userEXNum=0;


io.on('connection', function (socket) {
  console.log("socketID:" + socket.id);
  io.to(socket.id).json.emit("userEXNum", {
    userEXNum:userEXNum,
  });
  if (userEXNum < userEX.length+1) {
    userEXNum = userEX.length+1;
    socket.broadcast.json.emit("loadNewUser", {
      userEXNum: userEXNum,
    });
  }
  

  //マイナンバー
  socket.on("myNum", function (data) {
    userName[userNum]="名もなき名無し"
    userIDEX[userNum] = socket.id;
    AX[userNum] = 410;
    AY[userNum] = 80;
    C[userNum] = 6;
    io.to(socket.id).json.emit("myNum_from_server",{
      userNum: userNum,
    });
    userEX[userNum] = true;
    userNum = 0;

    while(userEX[userNum] == true) {
      userNum++;
    }
    console.log("userEX" + userEX);
    console.log("userNum" + userNum);
  });


  socket.on("join_room", function (data) {//部屋に入室した時
    room = data.room;
    userName[data.userNum]=data.userName;//名前をサバに保存
    socket.join(room);
    io.to(socket.id).json.emit("join_me_from_server",{
      userEX: userEX,
      userName: userName,
      AX: AX,
      AY: AY,
      C:C,
    });

    socket.broadcast.to(room).emit("join_room_from_server", {
      userNum:data.userNum,
      userName:data.userName,
      msg:userName[data.userNum]+"が"+room+"に入室しました。",
    });
   
  });

  //メッセージを送信
  socket.on("emit_msg",function(data){
    io.to(room).emit("emit_msg_from_server",{
      msg:"["+userName[data.userNum]+"]:"+data.msg,
      userNum:data.userNum,
      avaMsg:data.msg,
    });
  });

  //クリックイベント
  socket.on('clickMap', function (data) {
        C[data.userNum]=data.C;
        AX[data.userNum]=data.AX;
        AY[data.userNum]=data.AY;
    io.to(room).emit("clickMap_from_server",{
      D:C[data.userNum],
      C:data.C,
      userNum:data.userNum,
      moveX:data.moveX,
      moveY:data.moveY,
    });
  });
  
  socket.on("AXYC",function(data){
    AX[data.userNum]=data.AX;
    AY[data.userNum]=data.AY;
    C[data.userNum]=data.C;
  });
  
  //退出時
  socket.on("disconnect", function () {
    console.log("socket.id:dis:" + socket.id);
    for (let i = 0; i < userIDEX.length; i++) {//IDが存在する間
      if (userIDEX[i] == socket.id) {
        userEX[i] = false;
        if (i+1 == userEX.length) {
          do {
            userEX.pop();
          } while (userEX[i]==false)
        }
        io.to(room).emit("logout_from_server", {
          userIDEX: i,
          msg: userName[i] + "が退出しました。",
        });
        userName[i] = "名もなき名無し";
      }
    }
  });
});

//あとでuserNumを０から埋める処理とAXとかAYの初期化処理を付け加える

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
